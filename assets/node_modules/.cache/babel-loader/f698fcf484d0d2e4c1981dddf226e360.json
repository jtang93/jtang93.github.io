{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/mapbox.js\";\nimport React, { Component } from 'react';\nimport ReactMapboxGl, { Marker, Layer, Feature, Popup } from \"react-mapbox-gl\";\nimport { GeoJSONLayer } from \"react-mapbox-gl\"; // import { connect } from 'react-redux'\n\nvar Map = ReactMapboxGl({\n  accessToken: process.env.REACT_APP_KEY\n});\n\nvar mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\n\nvar geocodingClient = mbxGeocoding({\n  accessToken: process.env.REACT_APP_KEY\n});\n\nvar Mapbox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Mapbox, _React$Component);\n\n  function Mapbox() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Mapbox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Mapbox)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      listings: _this.props.listings,\n      currentListing: null,\n      mapCenter: [-74.0060, 40.7128] // componentDidMount() {\n      //   fetch('http://localhost:4000/api/v1/listings')\n      //   .then(r => r.json())\n      //   .then(parsed => {\n      //     this.setState({listings: parsed})\n      //     console.log('mapbox listings:', this.state.listings)\n      //   })\n      // }\n\n    };\n\n    _this.cStringToGeocode = function (listing) {\n      return listing.coordinates.split(\",\").map(function (n) {\n        return parseFloat(n);\n      });\n    };\n\n    _this.makeFeatures = function () {\n      var pins = _this.state.listings.map(function (listing) {\n        return React.createElement(Marker, {\n          coordinates: _this.cStringToGeocode(listing),\n          onClick: function onClick(e) {\n            return _this.clickHandler(e, listing);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      });\n\n      console.log(\"pins\", pins);\n      return pins;\n    };\n\n    _this.clickHandler = function (e, listing) {\n      console.log(e);\n      console.log(listing);\n\n      _this.setState({\n        currentListing: listing\n      });\n\n      console.log(\"current listing:\", _this.state.currentListing); // this.setState({mapCenter: this.cStringToGeocode(listing)})\n    };\n\n    _this.makePopups = function () {\n      if (_this.state.currentListing) {\n        var currentID = _this.state.currentListing.id;\n        return React.createElement(Popup, {\n          coordinates: _this.cStringToGeocode(_this.state.currentListing),\n          anchor: \"top\",\n          onClick: function onClick() {\n            return _this.closePopup();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, \"Item: \", _this.state.currentListing.item), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Condition: \", _this.state.currentListing.condition), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"Location: \", _this.state.currentListing.location), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"popupImage\",\n          src: \"https://res.cloudinary.com/dhoaj6ygx/image/upload/v1546474612/item\".concat(currentID, \".jpg\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        })));\n      }\n    };\n\n    _this.closePopup = function () {\n      _this.setState({\n        currentListing: null\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Mapbox, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.listings);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Map, {\n        style: \"mapbox://styles/mapbox/streets-v9\",\n        center: this.state.mapCenter,\n        containerStyle: {\n          height: \"100vh\",\n          width: \"100vw\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"marker\",\n        layout: {\n          \"icon-image\": \"rocket-15\"\n        },\n        color: \"#01FEDC\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.makeFeatures()), this.makePopups()));\n    }\n  }]);\n\n  return Mapbox;\n}(React.Component); // function mapStateToProps(state) {\n//   return{\n//     listings: state.listings\n//   }\n// }\n//\n// function mapDispatchToProps(dispatch) {\n//   return{\n//     updateListings: dispatch\n//   }\n// }\n//\n// export default connect(mapStateToProps, mapDispatchToProps)(Mapbox)\n\n\nexport { Mapbox as default };","map":{"version":3,"sources":["/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/mapbox.js"],"names":["React","Component","ReactMapboxGl","Marker","Layer","Feature","Popup","GeoJSONLayer","Map","accessToken","process","env","REACT_APP_KEY","mbxGeocoding","require","geocodingClient","Mapbox","state","listings","props","currentListing","mapCenter","cStringToGeocode","listing","coordinates","split","map","n","parseFloat","makeFeatures","pins","e","clickHandler","console","log","setState","makePopups","currentID","id","closePopup","item","condition","location","height","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ReactMapboxGl, { Marker, Layer, Feature, Popup } from \"react-mapbox-gl\";\nimport { GeoJSONLayer } from \"react-mapbox-gl\";\n// import { connect } from 'react-redux'\n\nconst Map = ReactMapboxGl({\n  accessToken: process.env.REACT_APP_KEY\n})\n\nconst mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\nconst geocodingClient = mbxGeocoding({ accessToken: process.env.REACT_APP_KEY });\n\nexport default class Mapbox extends React.Component {\n\nstate = {\n  listings: this.props.listings,\n  currentListing: null,\n  mapCenter: [-74.0060, 40.7128]\n}\n\n// componentDidMount() {\n//   fetch('http://localhost:4000/api/v1/listings')\n//   .then(r => r.json())\n//   .then(parsed => {\n//     this.setState({listings: parsed})\n//     console.log('mapbox listings:', this.state.listings)\n//   })\n// }\n\ncStringToGeocode = (listing) => {\n  return(listing.coordinates.split(\",\").map(n => parseFloat(n)))\n}\n\nmakeFeatures = () => {\n  let pins = this.state.listings.map(listing =>\n    <Marker coordinates={this.cStringToGeocode(listing)} onClick={(e) => this.clickHandler(e, listing)}/>\n  )\n  console.log(\"pins\",pins)\n  return(pins)\n}\n\nclickHandler = (e, listing) => {\n  console.log(e)\n  console.log(listing)\n  this.setState({currentListing: listing})\n  console.log(\"current listing:\", this.state.currentListing)\n\n  // this.setState({mapCenter: this.cStringToGeocode(listing)})\n}\n\nmakePopups = () => {\n  if (this.state.currentListing) {\n    let currentID = this.state.currentListing.id\n    return(\n      <Popup\n      coordinates={this.cStringToGeocode(this.state.currentListing)}\n      anchor=\"top\"\n      onClick = {() => this.closePopup()}\n      >\n        <p>Item: {this.state.currentListing.item}</p>\n        <p>Condition: {this.state.currentListing.condition}</p>\n        <p>Location: {this.state.currentListing.location}</p>\n        <p><img className=\"popupImage\" src={`https://res.cloudinary.com/dhoaj6ygx/image/upload/v1546474612/item${currentID}.jpg`}/></p>\n      </Popup>)\n    }\n  }\n\nclosePopup = () => {\n  this.setState({currentListing: null})\n}\n\nrender() {\n  console.log(this.props.listings)\n  return (\n    <div>\n      <Map\n      style=\"mapbox://styles/mapbox/streets-v9\"\n      center={this.state.mapCenter}\n      containerStyle={{\n        height: \"100vh\",\n        width: \"100vw\"\n      }}>\n\n        <Layer\n        type=\"symbol\"\n        id=\"marker\"\n        layout={{ \"icon-image\": \"rocket-15\" }}\n        color=\"#01FEDC\">\n\n          {this.makeFeatures()}\n\n        </Layer>\n        {this.makePopups()}\n\n\n\n\n      </Map>\n\n\n    </div>\n  )\n}\n\n\n}\n\n// function mapStateToProps(state) {\n//   return{\n//     listings: state.listings\n//   }\n// }\n//\n// function mapDispatchToProps(dispatch) {\n//   return{\n//     updateListings: dispatch\n//   }\n// }\n//\n// export default connect(mapStateToProps, mapDispatchToProps)(Mapbox)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/submitForm.js\";\nimport React, { Component } from 'react';\n\nvar mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\n\nvar geocodingClient = mbxGeocoding({\n  accessToken: process.env.REACT_APP_KEY\n});\n\nvar SubmitForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SubmitForm, _React$Component);\n\n  function SubmitForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SubmitForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SubmitForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      item: 'something',\n      condition: 'new',\n      location: 'Elmhurst, NY',\n      coordinates: null,\n      picture: null\n    };\n\n    _this.getGeoCode = function (location) {\n      geocodingClient.forwardGeocode({\n        query: \"\".concat(location),\n        limit: 1\n      }).send().then(function (response) {\n        console.log(response.body.features[0].center);\n\n        _this.setState({\n          coordinates: response.body.features[0].center\n        });\n      });\n    };\n\n    _this.submitHandler = function (e) {\n      e.preventDefault();\n      getGeoCode(_this.state.location);\n      fetch('http://localhost:4000/api/v1/listings', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          listing: {\n            user_id: 1,\n            item: _this.state.item,\n            condition: _this.state.condition,\n            location: _this.state.location,\n            coordinates: _this.state.coordinates,\n            picture: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Guy_Fieri_at_Guantanamo_2.jpg'\n          }\n        })\n      }).then(function (r) {\n        return r.json();\n      }).then(console.log);\n    };\n\n    return _this;\n  }\n\n  _createClass(SubmitForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          return _this2.submitHandler(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Item:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Condition:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"condition\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Location:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"location\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Picture:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"picture\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SubmitForm;\n}(React.Component);\n\nexport default SubmitForm;","map":{"version":3,"sources":["/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/submitForm.js"],"names":["React","Component","mbxGeocoding","require","geocodingClient","accessToken","process","env","REACT_APP_KEY","SubmitForm","state","item","condition","location","coordinates","picture","getGeoCode","forwardGeocode","query","limit","send","then","response","console","log","body","features","center","setState","submitHandler","e","preventDefault","fetch","method","headers","Accept","JSON","stringify","listing","user_id","r","json"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nconst mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\nconst geocodingClient = mbxGeocoding({ accessToken: process.env.REACT_APP_KEY });\n\nclass SubmitForm extends React.Component {\n\n  state = {\n    item: 'something',\n    condition: 'new',\n    location: 'Elmhurst, NY',\n    coordinates: null,\n    picture: null\n  }\n\n  getGeoCode = (location) => {geocodingClient.forwardGeocode({\n      query: `${location}`,\n      limit: 1\n    })\n  .send()\n  .then(response => {\n    console.log(response.body.features[0].center)\n    this.setState({coordinates: response.body.features[0].center})\n  })\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault()\n    getGeoCode(this.state.location)\n    fetch('http://localhost:4000/api/v1/listings', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        listing: {\n          user_id: 1,\n          item: this.state.item,\n          condition: this.state.condition,\n          location: this.state.location,\n          coordinates: this.state.coordinates,\n          picture: 'https://upload.wikimedia.org/wikipedia/commons/9/9a/Guy_Fieri_at_Guantanamo_2.jpg'\n        }\n      })\n    })\n    .then(r => r.json())\n    .then(console.log)\n    }\n\n  render () {\n\n    return (\n      <form onSubmit = {(e) => this.submitHandler(e)}>\n        <label>\n          Item:\n          <input type=\"text\" name=\"item\" />\n        </label>\n        <br/>\n        <label>\n          Condition:\n          <input type=\"text\" name=\"condition\" />\n        </label>\n        <br/>\n        <label>\n          Location:\n          <input type=\"text\" name=\"location\" />\n        </label>\n        <br/>\n        <label>\n          Picture:\n          <input type=\"text\" name=\"picture\" />\n        </label>\n        <br/>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    )\n  }\n\n\n\n}\nexport default SubmitForm\n"]},"metadata":{},"sourceType":"module"}
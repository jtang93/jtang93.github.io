{"ast":null,"code":"import _defineProperty from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/submitForm.js\";\nimport React, { Component } from 'react';\nimport { FilePond } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\n\nvar mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\n\nvar geocodingClient = mbxGeocoding({\n  accessToken: process.env.REACT_APP_KEY\n});\n\nvar SubmitForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SubmitForm, _React$Component);\n\n  function SubmitForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SubmitForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SubmitForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      item: null,\n      condition: null,\n      location: null,\n      coordinates: null,\n      picture: null\n    };\n\n    _this.getGeoCode = function (location) {\n      geocodingClient.forwardGeocode({\n        query: \"\".concat(location),\n        limit: 1\n      }).send().then(function (response) {\n        var match = response.body.features[0].center;\n        console.log(match);\n\n        _this.setState({\n          coordinates: match.toString()\n        });\n      });\n    };\n\n    _this.changeHandler = function (e) {\n      // this.setState({ [semanticInputData.name]: semanticInputData.value })\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n\n      if (!!_this.state.location) {\n        _this.getGeoCode(_this.state.location);\n      }\n    };\n\n    _this.submitHandler = function (e) {\n      e.preventDefault();\n      fetch('http://localhost:4000/api/v1/listings', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          listing: {\n            user_id: 1,\n            item: _this.state.item,\n            condition: _this.state.condition,\n            location: _this.state.location,\n            coordinates: _this.state.coordinates\n          }\n        })\n      }).then(function (r) {\n        return r.json();\n      }).then(function (response) {\n        console.log(response);\n        var item = response;\n        var uploadurl = 'https://api.cloudinary.com/v1_1/dhoaj6ygx/image/upload';\n        var uploadpreset = 'epdquaqb';\n        var formdata = new FormData();\n        formdata.append('file', _this.state.picture);\n        formdata.append('upload_preset', uploadpreset);\n        formdata.append(\"public_id\", \"item\".concat(item.id));\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", uploadurl, true);\n        xhr.send(formdata);\n      });\n\n      _this.props.updateMainState();\n    };\n\n    _this.selectFile = function (e) {\n      _this.setState({\n        picture: e.target.files[0]\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SubmitForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          return _this2.submitHandler(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Item:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"item\",\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Condition:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"condition\",\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Location:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"location\",\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Pictures:\", React.createElement(\"input\", {\n        type: \"file\",\n        name: \"picture\",\n        onChange: this.selectFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SubmitForm;\n}(React.Component);\n\nexport default SubmitForm;","map":{"version":3,"sources":["/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/submitForm.js"],"names":["React","Component","FilePond","mbxGeocoding","require","geocodingClient","accessToken","process","env","REACT_APP_KEY","SubmitForm","state","item","condition","location","coordinates","picture","getGeoCode","forwardGeocode","query","limit","send","then","response","match","body","features","center","console","log","setState","toString","changeHandler","e","target","name","value","submitHandler","preventDefault","fetch","method","headers","Accept","JSON","stringify","listing","user_id","r","json","uploadurl","uploadpreset","formdata","FormData","append","id","xhr","XMLHttpRequest","open","props","updateMainState","selectFile","files"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FilePond } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\n\nconst mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\nconst geocodingClient = mbxGeocoding({ accessToken: process.env.REACT_APP_KEY });\n\nclass SubmitForm extends React.Component {\n\n  state = {\n    item: null,\n    condition: null,\n    location: null,\n    coordinates: null,\n    picture: null,\n  }\n\n  getGeoCode = (location) => {geocodingClient.forwardGeocode({\n      query: `${location}`,\n      limit: 1\n    })\n  .send()\n  .then(response => {\n    const match = response.body.features[0].center\n    console.log(match)\n    this.setState({coordinates: match.toString()})\n  })\n  }\n\n  changeHandler = (e) => {\n    // this.setState({ [semanticInputData.name]: semanticInputData.value })\n    this.setState({ [e.target.name]: e.target.value })\n    if (!!this.state.location) {\n      this.getGeoCode(this.state.location)\n    }\n  }\n\n  submitHandler = (e) => {\n    e.preventDefault()\n    fetch('http://localhost:4000/api/v1/listings', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        listing: {\n          user_id: 1,\n          item: this.state.item,\n          condition: this.state.condition,\n          location: this.state.location,\n          coordinates: this.state.coordinates\n        }\n      })\n    })\n    .then(r => r.json())\n    .then(response => {\n      console.log(response)\n      let item = response\n      let uploadurl = 'https://api.cloudinary.com/v1_1/dhoaj6ygx/image/upload'\n      let uploadpreset = 'epdquaqb'\n      let formdata = new FormData()\n      formdata.append('file', this.state.picture)\n      formdata.append('upload_preset', uploadpreset)\n      formdata.append(\"public_id\", `item${item.id}`)\n      let xhr = new XMLHttpRequest()\n      xhr.open(\"POST\", uploadurl, true)\n      xhr.send(formdata)}\n    )\n    this.props.updateMainState()\n  }\n\n  selectFile = (e) => {\n    this.setState({picture: e.target.files[0]})\n  }\n\n  render () {\n    return (\n      <form onSubmit = {(e) => this.submitHandler(e)}>\n        <label>\n          Item:\n          <input type=\"text\" name=\"item\" onChange={this.changeHandler}/>\n        </label>\n        <br/>\n        <label>\n          Condition:\n          <input type=\"text\" name=\"condition\" onChange={this.changeHandler}/>\n        </label>\n        <br/>\n        <label>\n          Location:\n          <input type=\"text\" name=\"location\" onChange={this.changeHandler}/>\n        </label>\n        <br/>\n        <label>\n          Pictures:\n          <input type=\"file\" name=\"picture\" onChange={this.selectFile}/>\n        </label>\n        <br/>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    )\n  }\n\n\n\n}\nexport default SubmitForm\n"]},"metadata":{},"sourceType":"module"}
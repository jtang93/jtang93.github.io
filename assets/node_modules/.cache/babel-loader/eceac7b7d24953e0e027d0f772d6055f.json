{"ast":null,"code":"import _objectSpread from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/mapbox.js\";\nimport React, { Component } from 'react';\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport { GeoJSONLayer } from \"react-mapbox-gl\";\nvar Map = ReactMapboxGl({\n  accessToken: \"pk.eyJ1IjoianRhbmc5MyIsImEiOiJjanB1OXIyZXQwZWZ4M3hudHM4NGl0cmc3In0.q6DGhvJla097_6b-RMi0Fw\"\n});\n\nvar mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\n\nvar geocodingClient = mbxGeocoding({\n  accessToken: 'pk.eyJ1IjoianRhbmc5MyIsImEiOiJjanB1OXIyZXQwZWZ4M3hudHM4NGl0cmc3In0.q6DGhvJla097_6b-RMi0Fw'\n});\n\nvar Mapbox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Mapbox, _React$Component);\n\n  function Mapbox() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Mapbox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Mapbox)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      locations: [],\n      geojson: null\n    };\n\n    _this.makeFeatures = function () {\n      console.log(\"locations\", _this.state.locations);\n      var locations = _this.state.locations;\n      locations.forEach(function (coordinate) {\n        return React.createElement(Feature, {\n          coordinates: coordinate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Mapbox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('http://localhost:4000/api/v1/listings').then(function (r) {\n        return r.json();\n      }).then(function (parsed) {\n        _this2.setState({\n          geojson: parsed\n        });\n\n        console.log(_this2.state.geojson);\n\n        _this2.state.geojson.map(function (listing) {\n          geocodingClient.forwardGeocode({\n            query: \"\".concat(listing.location),\n            limit: 1\n          }).send().then(function (response) {\n            var match = response.body.features[0].center;\n            var locations = _this2.state.locations;\n\n            _this2.setState({\n              locations: _objectSpread({}, locations, {\n                match: match\n              })\n            });\n\n            console.log(locations);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Map, {\n        style: \"mapbox://styles/mapbox/streets-v9\",\n        center: [-74.0060, 40.7128],\n        containerStyle: {\n          height: \"100vh\",\n          width: \"100vw\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Layer, {\n        type: \"symbol\",\n        id: \"marker\",\n        layout: {\n          \"icon-image\": \"marker-15\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.makeFeatures())));\n    }\n  }]);\n\n  return Mapbox;\n}(React.Component);\n\nexport default Mapbox;","map":{"version":3,"sources":["/Users/flatironschool/Projects/mod5-final-project/Freesh/frontend/src/components/main/mapbox.js"],"names":["React","Component","ReactMapboxGl","Layer","Feature","GeoJSONLayer","Map","accessToken","mbxGeocoding","require","geocodingClient","Mapbox","state","locations","geojson","makeFeatures","console","log","forEach","coordinate","fetch","then","r","json","parsed","setState","map","listing","forwardGeocode","query","location","limit","send","response","match","body","features","center","height","width"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,IAAwBC,KAAxB,EAA+BC,OAA/B,QAA8C,iBAA9C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,IAAMC,GAAG,GAAGJ,aAAa,CAAC;AACxBK,EAAAA,WAAW,EAAE;AADW,CAAD,CAAzB;;AAIA,IAAMC,YAAY,GAAGC,OAAO,CAAC,uCAAD,CAA5B;;AACA,IAAMC,eAAe,GAAGF,YAAY,CAAC;AAAED,EAAAA,WAAW,EAAE;AAAf,CAAD,CAApC;;IAEMI,M;;;;;;;;;;;;;;;;;UAENC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,OAAO,EAAE;AAFH,K;;UA6BRC,Y,GAAe,YAAM;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,MAAKL,KAAL,CAAWC,SAApC;AACA,UAAIA,SAAS,GAAG,MAAKD,KAAL,CAAWC,SAA3B;AACAA,MAAAA,SAAS,CAACK,OAAV,CAAkB,UAAAC,UAAU,EAAI;AAC9B,eACE,oBAAC,OAAD;AAAS,UAAA,WAAW,EAAEA,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,OAJD;AAKD,K;;;;;;;wCAhCmB;AAAA;;AAClBC,MAAAA,KAAK,CAAC,uCAAD,CAAL,CACCC,IADD,CACM,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,OADP,EAECF,IAFD,CAEM,UAAAG,MAAM,EAAI;AACd,QAAA,MAAI,CAACC,QAAL,CAAc;AAACX,UAAAA,OAAO,EAAEU;AAAV,SAAd;;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAI,CAACL,KAAL,CAAWE,OAAvB;;AAEA,QAAA,MAAI,CAACF,KAAL,CAAWE,OAAX,CAAmBY,GAAnB,CAAuB,UAAAC,OAAO,EAAI;AAChCjB,UAAAA,eAAe,CACdkB,cADD,CACgB;AACdC,YAAAA,KAAK,YAAKF,OAAO,CAACG,QAAb,CADS;AAEdC,YAAAA,KAAK,EAAE;AAFO,WADhB,EAKCC,IALD,GAMCX,IAND,CAMM,UAAAY,QAAQ,EAAI;AAChB,gBAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcC,QAAd,CAAuB,CAAvB,EAA0BC,MAAxC;AACA,gBAAIxB,SAAS,GAAG,MAAI,CAACD,KAAL,CAAWC,SAA3B;;AACA,YAAA,MAAI,CAACY,QAAL,CAAc;AAACZ,cAAAA,SAAS,oBAAMA,SAAN;AAAiBqB,gBAAAA,KAAK,EAALA;AAAjB;AAAV,aAAd;;AACAlB,YAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACD,WAXD;AAYD,SAbD;AAcD,OApBD;AAqBD;;;6BAYQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,GAAD;AACA,QAAA,KAAK,EAAC,mCADN;AAEA,QAAA,MAAM,EAAE,CAAC,CAAC,OAAF,EAAW,OAAX,CAFR;AAGA,QAAA,cAAc,EAAE;AACdyB,UAAAA,MAAM,EAAE,OADM;AAEdC,UAAAA,KAAK,EAAE;AAFO,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOA,oBAAC,KAAD;AACA,QAAA,IAAI,EAAC,QADL;AAEA,QAAA,EAAE,EAAC,QAFH;AAGA,QAAA,MAAM,EAAE;AAAE,wBAAc;AAAhB,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIC,KAAKxB,YAAL,EAJD,CAPA,CADA,CADF;AAqBD;;;;EA/DoBf,KAAK,CAACC,S;;AAoE3B,eAAeU,MAAf","sourcesContent":["import React, { Component } from 'react'\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport { GeoJSONLayer } from \"react-mapbox-gl\";\n\nconst Map = ReactMapboxGl({\n  accessToken: \"pk.eyJ1IjoianRhbmc5MyIsImEiOiJjanB1OXIyZXQwZWZ4M3hudHM4NGl0cmc3In0.q6DGhvJla097_6b-RMi0Fw\"\n})\n\nconst mbxGeocoding = require('@mapbox/mapbox-sdk/services/geocoding');\nconst geocodingClient = mbxGeocoding({ accessToken: 'pk.eyJ1IjoianRhbmc5MyIsImEiOiJjanB1OXIyZXQwZWZ4M3hudHM4NGl0cmc3In0.q6DGhvJla097_6b-RMi0Fw' });\n\nclass Mapbox extends React.Component {\n\nstate = {\n  locations: [],\n  geojson: null\n}\n\ncomponentDidMount() {\n  fetch('http://localhost:4000/api/v1/listings')\n  .then(r => r.json())\n  .then(parsed => {\n    this.setState({geojson: parsed})\n    console.log(this.state.geojson)\n\n    this.state.geojson.map(listing => {\n      geocodingClient\n      .forwardGeocode({\n        query: `${listing.location}`,\n        limit: 1\n      })\n      .send()\n      .then(response => {\n        const match = response.body.features[0].center;\n        let locations = this.state.locations\n        this.setState({locations: {...locations, match}})\n        console.log(locations)\n      });\n    })\n  })\n}\n\nmakeFeatures = () => {\n  console.log(\"locations\", this.state.locations)\n  let locations = this.state.locations\n  locations.forEach(coordinate => {\n    return (\n      <Feature coordinates={coordinate}/>\n    )\n  })\n}\n\nrender() {\n  return (\n    <div>\n    <Map\n    style=\"mapbox://styles/mapbox/streets-v9\"\n    center={[-74.0060, 40.7128]}\n    containerStyle={{\n      height: \"100vh\",\n      width: \"100vw\"\n    }}>\n    <Layer\n    type=\"symbol\"\n    id=\"marker\"\n    layout={{ \"icon-image\": \"marker-15\" }}>\n    {this.makeFeatures()}\n    </Layer>\n\n    </Map>\n\n\n    </div>\n  )\n}\n\n\n}\n\nexport default Mapbox\n"]},"metadata":{},"sourceType":"module"}
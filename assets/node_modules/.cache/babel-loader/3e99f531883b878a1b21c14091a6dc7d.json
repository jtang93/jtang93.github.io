{"ast":null,"code":"/*!\n * react-filepond v5.0.0\n * A handy FilePond adapter component for React\n * \n * Copyright (c) 2018 PQINA\n * https://pqina.nl/filepond\n * \n * Licensed under the MIT license.\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.File = exports.FilePond = exports.registerPlugin = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _filepond = require('filepond');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Import required methods and styles from the FilePond module, should not need anything else\n// We need to be able to call the registerPlugin method directly so we can add plugins\n\n\nexports.registerPlugin = _filepond.registerPlugin; // Do this once\n\nvar isSupported = (0, _filepond.supported)(); // returns file sources from the <File/> child objects\n\nvar getFilesFromChildren = function getFilesFromChildren(children) {\n  return children ? _react2.default.Children.map(children, function (child) {\n    var props = child.props; // new mapping\n\n    if (props.src) {\n      var options = {};\n\n      if (props.origin) {\n        options.type = props.origin;\n      }\n\n      if (props.name) {\n        options.file = {\n          name: props.name,\n          size: props.size,\n          type: props.type\n        };\n      }\n\n      if (props.metadata) {\n        options.metadata = props.metadata;\n      }\n\n      return {\n        source: props.src,\n        options: options\n      };\n    } // deprecated mapping\n\n\n    if (props.source && props.type) {\n      return {\n        source: props.source,\n        options: {\n          type: props.type\n        }\n      };\n    }\n\n    return props.source;\n  }) : [];\n}; // filtered methods\n\n\nvar filteredMethods = ['setOptions', 'on', 'off', 'onOnce', 'appendTo', 'insertAfter', 'insertBefore', 'isAttachedTo', 'replaceElement', 'restoreElement', 'destroy']; // The React <FilePond/> wrapper\n\nvar FilePond = exports.FilePond = function (_React$Component) {\n  _inherits(FilePond, _React$Component);\n\n  function FilePond() {\n    _classCallCheck(this, FilePond);\n\n    return _possibleConstructorReturn(this, (FilePond.__proto__ || Object.getPrototypeOf(FilePond)).apply(this, arguments));\n  }\n\n  _createClass(FilePond, [{\n    key: 'componentDidMount',\n    // Will setup FilePond instance when mounted\n    value: function componentDidMount() {\n      var _this2 = this; // exit here if not supported\n\n\n      if (!isSupported) {\n        return;\n      } // Create our pond\n\n\n      this._pond = (0, _filepond.create)(this._element, Object.assign({}, this.props, {\n        files: getFilesFromChildren(this.props.children)\n      })); // Reference pond methods to FilePond component instance\n\n      Object.keys(this._pond).filter(function (key) {\n        return !filteredMethods.includes(key);\n      }).forEach(function (key) {\n        _this2[key] = _this2._pond[key];\n      });\n    } // Will clean up FilePond instance when unmounted\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // exit when no pond defined\n      if (!this._pond) {\n        return;\n      }\n\n      this._pond.destroy();\n    } // Something changed\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      // exit when no pond defined\n      if (!this._pond) {\n        return;\n      }\n\n      var options = Object.assign({}, this.props); // test if file list has changed\n\n      var previousFiles = getFilesFromChildren(prevProps.children);\n      var currentFiles = getFilesFromChildren(this.props.children);\n\n      if (JSON.stringify(previousFiles) !== JSON.stringify(currentFiles)) {\n        options.files = currentFiles;\n      }\n\n      this._pond.setOptions(options);\n    } // Renders basic element hook for FilePond to attach to\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          id = _props.id,\n          name = _props.name,\n          className = _props.className,\n          allowMultiple = _props.allowMultiple,\n          required = _props.required,\n          captureMethod = _props.captureMethod,\n          acceptedFileTypes = _props.acceptedFileTypes;\n      return (0, _react.createElement)('div', {\n        className: 'filepond--wrapper'\n      }, (0, _react.createElement)('input', {\n        type: 'file',\n        name: name,\n        id: id,\n        accept: acceptedFileTypes,\n        multiple: allowMultiple,\n        required: required,\n        className: className,\n        capture: captureMethod,\n        ref: function ref(element) {\n          return _this3._element = element;\n        }\n      }));\n    }\n  }]);\n\n  return FilePond;\n}(_react2.default.Component); // <File/>, needs to be further extended with prop types\n\n\nvar File = exports.File = function (_React$Component2) {\n  _inherits(File, _React$Component2);\n\n  function File() {\n    _classCallCheck(this, File);\n\n    return _possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).apply(this, arguments));\n  }\n\n  return File;\n}(_react2.default.Component);","map":null,"metadata":{},"sourceType":"script"}